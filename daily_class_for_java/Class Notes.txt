===================================*************   Day 1 Class Notes     *****************===================================

Notes:-
    Topic: Introduction to Programming
           Class , Method , Variable / Object
           Same Package , Different Packages
           Importing Package
           Oops Concept Object-Oriented Programming Structure
           (Encapsulation, Inheritance, Polymorphism , Abstraction)

     Introduction to Programming :-
          JDK = JVM +  JRE
          JDK = Java Development Kit, JVM = Java Virtual Machine, JRE = Java Runtime Environment
            JDK is a software development kit used to develop Java applications.
            JVM is an abstract machine that provides the runtime environment to execute Java bytecode.
            JRE is a part of JDK that provides the libraries and other components to run Java applications.

     Class , Method , Variable / Object :-
        Project Name: Declaration type Title case
        Package Name: Declaration type lower case
        Class Name: Declaration type Title case
        Method Name: Declaration type Camel case
        Variable Name: Declaration type Camel case
        Object Name: Declaration type Camel case

     About Project, Package, Class,Method, Variable/Object:
        - Project: A collection of related classes and resources.
        - Package: A namespace that organizes a set of related classes and interfaces.
        - Class: A blueprint for creating objects, defining properties and behaviors.
        - Method: A function defined within a class that describes the behavior of the objects.
        - Variable/Object: Variables are used to store data, and objects are instances of classes.

     Same Package , Different Packages
        - Same Package: Classes within the same package can access each other's members (variables and methods) directly.
        - Different Packages: Classes in different packages need to import the package to access its members.

     Importing Package:
        - To use classes from another package, you need to import that package using the `import` statement.
        - Example: `import java.util.Scanner;` allows you to use the Scanner class from the java.util package.

     Oops Concept Object-Oriented Programming Structure:
        - Inheritance: Mechanism where one class can inherit fields and methods from another class, promoting code reuse.
        - Polymorphism: Ability of different classes to be treated as instances of the same class through a common interface. It allows methods to do different things based on the object it is acting upon.
        - Abstraction: Hiding complex implementation details and showing only the essential features of an object. It helps in reducing programming complexity and effort.
        - Encapsulation: Bundling data (variables) and methods that operate on the data into a single unit (class). It restricts direct access to some of the object's components.

1. School =====> (Project)
        Class 1st   ========> (Package)
            Section A  =======> (Class)
                    Teacher: Mr. A  =======> (Object)
                    Students:
                        - Student 1 =======> (Method)
                                Reading 
                                Writing
                                Playing  ===> (Actions)
                        - Student 2
                        - Student 3
            Section B
                    Teacher: Mr. B
                    Students:
                        - Student 4
                        - Student 5
                        - Student 6
            Section C
                    Teacher: Mr. C
                    Students:
                        - Student 7
                        - Student 8
                        - Student 9
        Class 2nd
            Section A
                Teacher: Mr. A
                                    Students:
                                        - Student 1
                                        - Student 2
                                        - Student 3
            Section B
                Teacher: Mr. B
                                    Students:
                                        - Student 4
                                        - Student 5
                                        - Student 6
            Section C
                Teacher: Mr. C
                                    Students:
                                        - Student 7
                                        - Student 8
                                        - Student 9
        Class 3rd
            Section A
               Teacher: Mr. A
                                   Students:
                                       - Student 1
                                       - Student 2
                                       - Student 3
            Section B
                Teacher: Mr. B
                                      Students:
                                        - Student 4
                                        - Student 5
                                        - Student 6
            Section C
                Teacher: Mr. C
                                      Students:
                                        - Student 7
                                        - Student 8
                                        - Student 9

2. With-out main class we can not run the program. and we can not change the main method syntax.
            public static void main(String[] args){

               }
3. Object creation syntax:
            ClassName objectName = new ClassName();
            Example:
                Student student1 = new Student();

4. We can access the one class method to anthor class in same package the method should be in public (access modifier).
            Example:
                Class1 class1 = new Class1();
                class1.methodName();
     Note Access modifire is private then it is accessed by same class only

===================================*************   Day 2 Class Notes     *****************===================================
     Topic:    import the package from different package
               Inheritance
               Method Overloading
               Method Overriding


     Inheritance:
        - Inheritance allows a new class (subclass) to inherit properties and behaviors (fields and methods) from an existing class (superclass).
        - Syntax: `class SubClass extends SuperClass { }`
        - Example:
            ```java
            class Animal {
                void eat() {
                    System.out.println("Animal is eating");
                }
            }

            class Dog extends Animal {
                void bark() {
                    System.out.println("Dog is barking");
                }
            }
            ```
  Parent  child1 child2 child3

    child1    extends parent
    child2    extends parent
    child3    extends parent

     Method Overloading:
        - Method overloading allows multiple methods in the same class to have the same name but different parameters (different type, number, or order of parameters).
        - Example:
            ```java
            class MathOperations {
                int add(int a, int b) {
                    return a + b;
                }

                double add(double a, double b) {
                    return a + b;
                }
            }
            ```

     Method Overriding:
        - Method overriding allows a subclass to provide a specific implementation of a method that is already defined in its superclass.
        - Syntax: `@Override` annotation is used before the method definition in the subclass.
        - Example:
            ```java
            class Animal {
                void sound() {
                    System.out.println("Animal makes sound");
                }
            }

            class Dog extends Animal {
                @Override
                void sound() {
                    System.out.println("Dog barks");
                }
            }
            ```

     Importing Packages from Different Packages:
        - To use classes from another package, you need to import that package using the `import` statement.
        - Example: `import java.util.ArrayList;` allows you to use the ArrayList class from the java.util package.

        Method orverloading means same class same method diffeternt parameter
        Method orverriding means same method same parameter but different class